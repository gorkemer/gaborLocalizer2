
"""
Moving Grating functional localizer & Experimental run. Small and Large sized dual-gratings at the periphery are presented. This program can initiate 5 types of blocks: Left Moving (L), Right Moving (R), Both Moving (BM), and Both Static (BS), and Blank (B). In the experiment only BM and B was used.

Used parameters: 
    6 sets of 4 conditions (set) lasting 288 seconds, 144 TR
    24 seconds of initial blank, 12 TR
    totaling 156 TR (number of slices)


Terminology used in the program:
    block: condition (e.g. LeftMoving or BothMoving), should last 12 seconds.
    set: comprised of 4 trial (condition), should last 48 seconds.
    trial: one motion type (e.g. radial motion), lasts 2 seconds.
    round: times of grating moving, 6 in this experiment. 
    
"""

from __future__ import division  # so that 1/3=0.333 instead of 1/3=0
from psychopy import visual, core, data, event, logging, sound, gui
from psychopy.constants import *  # things like STARTED, FINISHED
import numpy as np # whole numpy lib is available, prepend 'np.'
from numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys
from random import choice, randrange, shuffle
from psychopy.tools.coordinatetools import pol2cart, cart2pol
import time
from psychopy.tools.filetools import fromFile, toFile
import psychopy.gui
import csv

globalClock = core.Clock()

#Data Handling
try: #try to get a previous parameters file
    expInfo = fromFile('lastParams.pickle')
except:#if not there then use a default set
    expInfo = {'observer':'','practice': 1} #add more if you want
expInfo['dateStr']= data.getDateStr() #add the current time
#present a dialogue to change params
dlg = gui.DlgFromDict(expInfo, title='Gabor', fixed=['dateStr'])
if dlg.OK == False:
    core.quit()

#make a text file to save data
fileName = expInfo['observer'] + expInfo['dateStr']

#display options
refRate = 60  # 1 second
second = refRate
posX = 8.02
posY = 0

# Desing parameters
durInitialBlank = 24 * second
nSets = 6 #how many large-small sets? 6 means 288 seconds
nTrials = 6 # 6 * blockDuration = 6*2 = 12 seconds in total at each trial
durTrial  = second*2 # 1 round equals 4 seconds motion, inverting after 2 second
BlockList = ['BM','B']

# Grating options
smallStim = 1.67
largeStim = 8.05


# some important list for the experiment handling
responses = []
colorlist = []
keyList = []
response = None
rows = []

#stimuli & window initializing 
win = visual.Window([1920, 1080], units = 'deg', monitor = 'testMonitor', color = 'gray',fullscr=False)
win.setRecordFrameIntervals(True)

fixation = visual.GratingStim(win, size=0.2, pos=[0,0], sf=0,color = 'black')
fixationColored = visual.GratingStim(win, size=0.2, pos=[0,0], sf=0,color = 'red')
fixationRegular = visual.GratingStim(win, size=0.2, pos=[0,0], sf=0,color = 'black')




targetGaborLarge = visual.GratingStim(win, mask='gauss', sf=1, name='gabor', color = 1, size=largeStim, pos = (posX,posY), ori = 90, contrast = 0.99, texRes = 512)
targetGaborSmall = visual.GratingStim(win, mask='gauss', sf=1, name='gabor', color = 1, size=smallStim, pos = (posX,posY), ori = 90, contrast = 0.99, texRes = 512)
foilGaborLarge = visual.GratingStim(win, mask='gauss', sf=1, name='gabor', color = 1, size=largeStim, pos = (posX,posY), ori = 90,contrast = 0.99,  texRes = 512)
foilGaborSmall = visual.GratingStim(win, mask='gauss', sf=1, name='gabor', color = 1, size=smallStim, pos = (posX,posY), ori = 90,contrast = 0.99, texRes = 512)


def SingleMovingGrating(targetGabor, foilGabor, targetSide):
    ''' moves single Grating at the targetSide specified for the block '''
    
    targetGabor.setPos([posX*targetSide, posY]) 
    foilGabor.setPos([posX*-targetSide, posY])
    
    for trial in range(nTrials):
        t0= time.time()
        #keys = event.getKeys(keyList=["1", "4", "escape"])
        doThreeTimes = 0
        magicFrame = choice(range(0, 90)) #initialize random magic frame
        colorPresented = choice(['yellow', 'red'])
        fixationColored.color = colorPresented
        colorlist.append(colorPresented)
        
        for frameN in range(durTrial):
            if trial%2 == 0:# 0-120
                targetGabor.setPhase(0.1,'+')
                #foilGabor.setPhase(0.1,'+') #FOIL DOES NOT MOVE
            else: # 120 - 240
                targetGabor.setPhase(0.1,'-')
                #foilGabor.setPhase(0.1,'-') #FOILD DOES NOT MOVE
            
            #checking if it is magicFrame            
            if frameN >= magicFrame and doThreeTimes < 3: # 0 , 1 , 2 =  3 times
                fixa = fixationColored
                doThreeTimes += 1
                if doThreeTimes == 3:
                    Color_started = True
            else:
                fixa = fixationRegular
            targetGabor.draw()
            foilGabor.draw()
            fixa.draw()
            win.flip()
        
        
        #collect responses
        keys = event.getKeys(keyList=["1", "4", "escape"])
        for key in keys:
            if key == '1' and Color_started:  #
                if colorPresented == 'red':
                    response = 1
                elif colorPresented =='yellow':
                    response = -1
                responses.append(response)
                keyList.append(key)
            elif key == '4' and Color_started:
                if colorPresented == 'yellow':
                    response = 1
                elif colorPresented == 'red':
                    response = -1
                responses.append(response)
                keyList.append(key)
            elif key == 'escape':
                    win.close()
                    core.quit()
            else:
                response = None
                responses.append(response)

        t1 = time.time()
        trialLasts = t1-t0 # it should be 2 seconds
        print "trial lasts:", trialLasts


def BothMovingGratings(targetGabor, foilGabor, targetSide, BothMove):
    ''' moves (or not) both grating at the periphery '''
    
    targetGabor.setPos([posX*targetSide, posY]) 
    foilGabor.setPos([posX*-targetSide, posY])
    
    for trial in range(nTrials):
        t0 = time.time()
        #selecting MagicFrame
        doThreeTimes = 0
        magicFrame = choice(range(0, 90)) #initialize random magic frame
        colorPresented = choice(['yellow', 'red'])
        fixationColored.color = colorPresented
        colorlist.append(colorPresented)
        
        for frameN in range(durTrial):
            if trial%2== 0: # round = 0,2,4; 0-120 (first 2 seconds)
                if BothMove == True:
                    targetGabor.setPhase(0.1,'+')
                    foilGabor.setPhase(0.1,'+') 
            else: # round 1,3,5 = move opposite direction
                if BothMove == True:
                    targetGabor.setPhase(0.1,'-')
                    foilGabor.setPhase(0.1,'-') #FOILD DOES NOT MOVE
            
            #checking if it is magicFrame
            if frameN >= magicFrame and doThreeTimes < 3: # 0 , 1 , 2 =  3 times
                fixa = fixationColored
                doThreeTimes += 1
                if doThreeTimes == 3:
                    Color_started = True
            else:
                fixa = fixationRegular
            targetGabor.draw()
            foilGabor.draw()
            fixa.draw()
            win.flip()
        
        
        #collect responses
        keys = event.getKeys(keyList=["1", "4", "escape"])
        for key in keys:
            if key == '1' and Color_started:  #
                if colorPresented == 'red':
                    response = 1
                elif colorPresented =='yellow':
                    response = -1
                responses.append(response)
                keyList.append(key)
            elif key == '4' and Color_started:
                if colorPresented == 'yellow':
                    response = 1
                elif colorPresented == 'red':
                    response = -1
                responses.append(response)
                keyList.append(key)
            elif key == 'escape':
                    win.close()
                    core.quit()
            else:
                response = None
                responses.append(response)

        t1 = time.time()
        trialLasts = t1-t0 # it should be 2 seconds
        print "trial lasts:", trialLasts
    


print BlockList

##TRIGGER BOX
if expInfo['practice'] == 0:
    event.waitKeys(keyList = ['6'])

    ##24 sec wait
    for times in range(durInitialBlank):
        fixation.draw()
        win.flip()


#### TRIAL LOOP ####
for set in range(nSets): #1 set equals to 4 conditions
    t0 = time.time()
    if set % 2 == 0:
        targetGabor = targetGaborLarge
        foilGabor = foilGaborLarge
    else:
        targetGabor = targetGaborSmall
        foilGabor = foilGaborSmall

    for currentState in BlockList:
        s0 = time.time()
        #keys = event.getKeys(keyList=["1", "4", "escape"] )
    
        # alternating x position at every trial (left vs right)
        if currentState == 'L':
            targetSide = -1
            SingleMovingGrating(targetGabor, foilGabor, targetSide)
        elif currentState == 'R':
            targetSide = 1
            SingleMovingGrating(targetGabor, foilGabor, targetSide)
        elif currentState == 'BM':
            targetSide = 1 #arbitrary
            BothMove = True
            BothMovingGratings(targetGabor, foilGabor, targetSide, BothMove)
        elif currentState == 'BS':
            targetSide = 1 #arbitrary
            BothMove = False
            BothMovingGratings(targetGabor, foilGabor, targetSide, BothMove)
        elif currentState =='B':
            for times in range(6):
                t0 = time.time()
                doThreeTimes = 0
                magicFrame = choice(range(0, 90)) #initialize random magic frame
                colorPresented = choice(['yellow', 'red'])
                fixationColored.color = colorPresented
                colorlist.append(colorPresented)
                #selecting MagicFrame
                for frameN in range(durTrial):
                    #checking if it is magicFrame
                    if frameN >= magicFrame and doThreeTimes < 3: # 0 , 1 , 2 =  3 times
                        fixa = fixationColored
                        doThreeTimes += 1
                        if doThreeTimes == 3:
                            Color_started = True
                    else:
                        fixa = fixationRegular
                    fixa.draw()
                    win.flip()
        
        s1 = time.time()
        trialDuration = s1-s0
        print "trialDuration:", trialDuration

rows = zip(colorlist,responses,keyList)
with open(fileName + 'Gabor.csv', 'wb') as f:
    writer = csv.writer(f)
    for row in rows:
        writer.writerow(row)

win.close()
core.quit()
